#!/bin/bash
#===============================================================================
script_name="passenger_monitor"
script_author="Wayne E. Seguin"
script_version="0.0.3"
#===============================================================================
# This script monitors passenger application instances and gracefully restarts
#   any instances exceeding the configured memory_limit
#
# * Ensure this script is executable (chmod +x)
#===============================================================================
set -x 
#
# Variables and defaults.
#
rss_limit=220160 # Default rss limit is 215M
my_name=`basename $0`
timestamp=`date +"%a, %e %Y %T %z (%Z)"`
hostname=`hostname`
#
# Functions
#
function version { echo "$script_name version $script_version" ; }

function usage {
cat <<USAGE

Usage: $0 <application> [options]

  application - the name of the application being monitored

  options

    -l limit

        Default is (in kilobytes): ${rss_limit}

    -u user

    	User the process runs as. Default is owner of config/environment.rb or config.ru.
        Note: Only use this option in order to FORCE the user.

    -n notify list

      Comma separated list of email addresses to notify during an event.

    -f framework

        Framework of the application. Default is 'rails'.
        {rails, merb, rack}

    -r root

      Root path. Application is inferred from this.
      Default: /data/

    -h help - Print this.

  Notes:

    * indicates the default value.

USAGE

  exit 1
}

function framework_setup {
  if [ -z "$framework" ] ; then
    debug "framework not specified, defaulting to 'rails'"
    framework="rails"
  fi

  if [ $framework = "rails" ] ; then 
    framework_file="config/environment.rb"
    framework_ps_regex="Rails"
  elif [ $framework = "merb" ] ; then
    framework_file="config.ru"
    framework_ps_regex="merb"
  else
    framework_file="config.ru"
    framework_ps_regex="rack"
  fi
  debug "framework set to $framework"
}

function set_user {
  debug "setting user to owner of $framework_file"
  user=`stat -c"%U" $root_path/$application/current/$framework_file`
  debug "user set to $user"
}

function restart_instance {
  message="$framework '$application' instance ($1) has rss size of '$rss' exceeding the limit of '$rss_limit'. Signaling process to gracefully restart."
 
  logger -t $my_name -s $message ; debug $message
  kill -USR1 $1
}

function get_pid_list {
  ps -U $user -o pid,comm,command | awk "/${framework_ps_regex}:/ { print \$1 }"
}

function get_rss_size {
  debug "Extracting rss size of process $1"
  if [ -d "/proc/${1}/status" ] ; then 
    rss=$(cat /proc/${1}/status | awk '/VmRSS/ {print \$2}')
  else
    rss=0
  fi
}

function debug {
  if [[ $debug -eq 1 ]] ; then
    echo $1
  fi
}

function send_email {
  email_date=`date +"%a, %e %Y %T %z"`
  email=$(cat <<EOF
Date: $email_date
From: $from
To: $to
Reply-To: $from
Subject: [$my_name] - $subject (rss: $rss)
Mime-Version: 1.0

[$timestamp $my_name]: '$application' instance had an RSS size of '$rss'  exceeding the limit of '$rss_limit'. A graceful shutdown signal has been sent (finish processing current request then shut down.)

EOF
)
  echo "$email" | sendmail -t
}

function notify {
  if [ -z "$to" ] ; then
    logger -t $my_name -s "Unable to email retstart notification: recipient not specified."
  else
    debug "Sending notification to '$to'"
    from="noreply@$hostname.engineyard.com"
    subject="$application instance restart"
    send_email  
  fi
}

#
# Main
#

# Note: We are *expecting* the first argument to be the applciation name.
application=$1 ; shift 1
if [ "$application" = "" ] || [ "$application" = "-h" ]; then
  usage
fi
root_path="/data/"
while getopts "l:f:u:n:r:D:h" option ; do
  case $option in
    l) rss_limit="$OPTARG" ;;
    f) framework="$OPTARG" ;;
    u) user="$OPTARG" ;;
    n) notify="$OPTARG" ;;
    r) root_path="$OPTARG" ;;
    D) debug=1; set -x ;;
    ?) usage ;;
  esac
done

if [ ! -d $root_path ] ; then
  logger -t $my_name -s "Root path '$root_path' does not exist." ; exit 1
fi

framework_setup

# Note: Default user is owner of config/environment.rb or config.ru
if [ -z "$user" ] ; then
  set_user
fi

debug "Looking for $application $framework instances larger than $rss_limit running as '$user'."

debug "Extracting pids from ps for user '$user' using regex /$framework_ps_regex/ for application '$application'."

pids=`get_pid_list` ; debug "pids: $pids"

if [ -z "$notify" ] ; then
  to=$notify # Turn on email notifications.
fi

for pid in $pids ; do
  get_rss_size $pid
  debug "rss: $rss; pid: $pid ; pids: $pids"
  if [ ${rss:-0} -gt $rss_limit ]; then
    restart_instance $pid
    if [ -z "$to" ] ; then
      notify
    fi
  fi
done

